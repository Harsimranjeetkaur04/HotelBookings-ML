# -*- coding: utf-8 -*-
"""ml 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sx-l-A2_gyBeBDgFpwqEU2DYmRkKj23m
"""

import pandas as pd
df=pd.read_csv(r"/content/HotelBookings.csv")
df.info()
df.isnull().sum()#check for null values



drop_list=["agent","company","lead_time","reservation_status_date","arrival_date"]
df.drop(columns=drop_list,inplace=True)

df.dropna(inplace=True) #avoid using inplace = true

df.head()

import pandas as pd
from sklearn.preprocessing import LabelEncoder
df=pd.read_csv(r"/content/HotelBookings.csv")
df=df.apply(LabelEncoder().fit_transform)

df[list(df)].apply(lambda y: y.astype("category"))
#converting each feature to categories

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
sns.heatmap(df.corr())
sns.set(rc={"figure.figsize":(32,16)})

features=list(df)
features.remove("reservation_status")
print(features)

x=df[features]
y=df.reservation_status
y.head()

from sklearn.model_selection import train_test_split
import numpy as np
#x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size)
X = np.array([[1,2], [3,4], [5,6], [7,8]])
Y = np.array([0,1,0,1])
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn import metrics
import time
#from xgboost import XGBClassifier
#from xgboost import plot_tree
#from sklearn.ensemble import AdaBoostClassifier
#from lightgbm import LGBMClassifier

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
import time


gini_clf =DecisionTreeClassifier(criterion="gini",random_state=7)

start = time.time()
gini_clf = gini_clf.fit(X_train,Y_train)
stop = time.time()
print(f"Training time: {stop - start}s")

y_pred = gini_clf.predict(X_test)
print("Accuracy: ",metrics.accuracy_score(Y_test, y_pred))

ent_clf = DecisionTreeClassifier(criterion="entropy",random_state=7)

start = time.time()
ent_clf = ent_clf.fit

rfc = RandomForestClassifier(n_estimators=500, random_state=7)
start = time.time()
rfc = rfc.fit(X_train, Y_train)
stop = time.time()
print(f"Training time:  {stop - start}s")

